// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: beacons_v1.proto
// Original file comments:
// Copyright 2015 gRPC authors.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 1591
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace BeaconsV1 {
  /// <summary>
  /// The beacons service definition.
  /// </summary>
  public static partial class BeaconsV1
  {
    static readonly string __ServiceName = "beacons_v1.BeaconsV1";

    static readonly grpc::Marshaller<global::BeaconsV1.BeaconV1PageRequest> __Marshaller_BeaconV1PageRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BeaconsV1.BeaconV1PageRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::BeaconsV1.BeaconV1PageReply> __Marshaller_BeaconV1PageReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BeaconsV1.BeaconV1PageReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::BeaconsV1.BeaconV1IdRequest> __Marshaller_BeaconV1IdRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BeaconsV1.BeaconV1IdRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::BeaconsV1.BeaconV1ObjectReply> __Marshaller_BeaconV1ObjectReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BeaconsV1.BeaconV1ObjectReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::BeaconsV1.BeaconV1ObjectRequest> __Marshaller_BeaconV1ObjectRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BeaconsV1.BeaconV1ObjectRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::BeaconsV1.BeaconV1UdiRequest> __Marshaller_BeaconV1UdiRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BeaconsV1.BeaconV1UdiRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::BeaconsV1.BeaconV1PositionRequest> __Marshaller_BeaconV1PositionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BeaconsV1.BeaconV1PositionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::BeaconsV1.BeaconV1PositionReply> __Marshaller_BeaconV1PositionReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::BeaconsV1.BeaconV1PositionReply.Parser.ParseFrom);

    static readonly grpc::Method<global::BeaconsV1.BeaconV1PageRequest, global::BeaconsV1.BeaconV1PageReply> __Method_get_beacons = new grpc::Method<global::BeaconsV1.BeaconV1PageRequest, global::BeaconsV1.BeaconV1PageReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "get_beacons",
        __Marshaller_BeaconV1PageRequest,
        __Marshaller_BeaconV1PageReply);

    static readonly grpc::Method<global::BeaconsV1.BeaconV1IdRequest, global::BeaconsV1.BeaconV1ObjectReply> __Method_get_beacon_by_id = new grpc::Method<global::BeaconsV1.BeaconV1IdRequest, global::BeaconsV1.BeaconV1ObjectReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "get_beacon_by_id",
        __Marshaller_BeaconV1IdRequest,
        __Marshaller_BeaconV1ObjectReply);

    static readonly grpc::Method<global::BeaconsV1.BeaconV1ObjectRequest, global::BeaconsV1.BeaconV1ObjectReply> __Method_create_beacon = new grpc::Method<global::BeaconsV1.BeaconV1ObjectRequest, global::BeaconsV1.BeaconV1ObjectReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "create_beacon",
        __Marshaller_BeaconV1ObjectRequest,
        __Marshaller_BeaconV1ObjectReply);

    static readonly grpc::Method<global::BeaconsV1.BeaconV1ObjectRequest, global::BeaconsV1.BeaconV1ObjectReply> __Method_update_beacon = new grpc::Method<global::BeaconsV1.BeaconV1ObjectRequest, global::BeaconsV1.BeaconV1ObjectReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "update_beacon",
        __Marshaller_BeaconV1ObjectRequest,
        __Marshaller_BeaconV1ObjectReply);

    static readonly grpc::Method<global::BeaconsV1.BeaconV1IdRequest, global::BeaconsV1.BeaconV1ObjectReply> __Method_delete_beacon_by_id = new grpc::Method<global::BeaconsV1.BeaconV1IdRequest, global::BeaconsV1.BeaconV1ObjectReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "delete_beacon_by_id",
        __Marshaller_BeaconV1IdRequest,
        __Marshaller_BeaconV1ObjectReply);

    static readonly grpc::Method<global::BeaconsV1.BeaconV1UdiRequest, global::BeaconsV1.BeaconV1ObjectReply> __Method_get_beacon_by_udi = new grpc::Method<global::BeaconsV1.BeaconV1UdiRequest, global::BeaconsV1.BeaconV1ObjectReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "get_beacon_by_udi",
        __Marshaller_BeaconV1UdiRequest,
        __Marshaller_BeaconV1ObjectReply);

    static readonly grpc::Method<global::BeaconsV1.BeaconV1PositionRequest, global::BeaconsV1.BeaconV1PositionReply> __Method_calculate_position = new grpc::Method<global::BeaconsV1.BeaconV1PositionRequest, global::BeaconsV1.BeaconV1PositionReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "calculate_position",
        __Marshaller_BeaconV1PositionRequest,
        __Marshaller_BeaconV1PositionReply);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::BeaconsV1.BeaconsV1Reflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of BeaconsV1</summary>
    public abstract partial class BeaconsV1Base
    {
      public virtual global::System.Threading.Tasks.Task<global::BeaconsV1.BeaconV1PageReply> get_beacons(global::BeaconsV1.BeaconV1PageRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::BeaconsV1.BeaconV1ObjectReply> get_beacon_by_id(global::BeaconsV1.BeaconV1IdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::BeaconsV1.BeaconV1ObjectReply> create_beacon(global::BeaconsV1.BeaconV1ObjectRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::BeaconsV1.BeaconV1ObjectReply> update_beacon(global::BeaconsV1.BeaconV1ObjectRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::BeaconsV1.BeaconV1ObjectReply> delete_beacon_by_id(global::BeaconsV1.BeaconV1IdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::BeaconsV1.BeaconV1ObjectReply> get_beacon_by_udi(global::BeaconsV1.BeaconV1UdiRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::BeaconsV1.BeaconV1PositionReply> calculate_position(global::BeaconsV1.BeaconV1PositionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for BeaconsV1</summary>
    public partial class BeaconsV1Client : grpc::ClientBase<BeaconsV1Client>
    {
      /// <summary>Creates a new client for BeaconsV1</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public BeaconsV1Client(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for BeaconsV1 that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public BeaconsV1Client(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected BeaconsV1Client() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected BeaconsV1Client(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::BeaconsV1.BeaconV1PageReply get_beacons(global::BeaconsV1.BeaconV1PageRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return get_beacons(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::BeaconsV1.BeaconV1PageReply get_beacons(global::BeaconsV1.BeaconV1PageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_get_beacons, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::BeaconsV1.BeaconV1PageReply> get_beaconsAsync(global::BeaconsV1.BeaconV1PageRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return get_beaconsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::BeaconsV1.BeaconV1PageReply> get_beaconsAsync(global::BeaconsV1.BeaconV1PageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_get_beacons, null, options, request);
      }
      public virtual global::BeaconsV1.BeaconV1ObjectReply get_beacon_by_id(global::BeaconsV1.BeaconV1IdRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return get_beacon_by_id(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::BeaconsV1.BeaconV1ObjectReply get_beacon_by_id(global::BeaconsV1.BeaconV1IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_get_beacon_by_id, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::BeaconsV1.BeaconV1ObjectReply> get_beacon_by_idAsync(global::BeaconsV1.BeaconV1IdRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return get_beacon_by_idAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::BeaconsV1.BeaconV1ObjectReply> get_beacon_by_idAsync(global::BeaconsV1.BeaconV1IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_get_beacon_by_id, null, options, request);
      }
      public virtual global::BeaconsV1.BeaconV1ObjectReply create_beacon(global::BeaconsV1.BeaconV1ObjectRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return create_beacon(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::BeaconsV1.BeaconV1ObjectReply create_beacon(global::BeaconsV1.BeaconV1ObjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_create_beacon, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::BeaconsV1.BeaconV1ObjectReply> create_beaconAsync(global::BeaconsV1.BeaconV1ObjectRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return create_beaconAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::BeaconsV1.BeaconV1ObjectReply> create_beaconAsync(global::BeaconsV1.BeaconV1ObjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_create_beacon, null, options, request);
      }
      public virtual global::BeaconsV1.BeaconV1ObjectReply update_beacon(global::BeaconsV1.BeaconV1ObjectRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return update_beacon(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::BeaconsV1.BeaconV1ObjectReply update_beacon(global::BeaconsV1.BeaconV1ObjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_update_beacon, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::BeaconsV1.BeaconV1ObjectReply> update_beaconAsync(global::BeaconsV1.BeaconV1ObjectRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return update_beaconAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::BeaconsV1.BeaconV1ObjectReply> update_beaconAsync(global::BeaconsV1.BeaconV1ObjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_update_beacon, null, options, request);
      }
      public virtual global::BeaconsV1.BeaconV1ObjectReply delete_beacon_by_id(global::BeaconsV1.BeaconV1IdRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return delete_beacon_by_id(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::BeaconsV1.BeaconV1ObjectReply delete_beacon_by_id(global::BeaconsV1.BeaconV1IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_delete_beacon_by_id, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::BeaconsV1.BeaconV1ObjectReply> delete_beacon_by_idAsync(global::BeaconsV1.BeaconV1IdRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return delete_beacon_by_idAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::BeaconsV1.BeaconV1ObjectReply> delete_beacon_by_idAsync(global::BeaconsV1.BeaconV1IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_delete_beacon_by_id, null, options, request);
      }
      public virtual global::BeaconsV1.BeaconV1ObjectReply get_beacon_by_udi(global::BeaconsV1.BeaconV1UdiRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return get_beacon_by_udi(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::BeaconsV1.BeaconV1ObjectReply get_beacon_by_udi(global::BeaconsV1.BeaconV1UdiRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_get_beacon_by_udi, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::BeaconsV1.BeaconV1ObjectReply> get_beacon_by_udiAsync(global::BeaconsV1.BeaconV1UdiRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return get_beacon_by_udiAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::BeaconsV1.BeaconV1ObjectReply> get_beacon_by_udiAsync(global::BeaconsV1.BeaconV1UdiRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_get_beacon_by_udi, null, options, request);
      }
      public virtual global::BeaconsV1.BeaconV1PositionReply calculate_position(global::BeaconsV1.BeaconV1PositionRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return calculate_position(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::BeaconsV1.BeaconV1PositionReply calculate_position(global::BeaconsV1.BeaconV1PositionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_calculate_position, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::BeaconsV1.BeaconV1PositionReply> calculate_positionAsync(global::BeaconsV1.BeaconV1PositionRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return calculate_positionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::BeaconsV1.BeaconV1PositionReply> calculate_positionAsync(global::BeaconsV1.BeaconV1PositionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_calculate_position, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override BeaconsV1Client NewInstance(ClientBaseConfiguration configuration)
      {
        return new BeaconsV1Client(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(BeaconsV1Base serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_get_beacons, serviceImpl.get_beacons)
          .AddMethod(__Method_get_beacon_by_id, serviceImpl.get_beacon_by_id)
          .AddMethod(__Method_create_beacon, serviceImpl.create_beacon)
          .AddMethod(__Method_update_beacon, serviceImpl.update_beacon)
          .AddMethod(__Method_delete_beacon_by_id, serviceImpl.delete_beacon_by_id)
          .AddMethod(__Method_get_beacon_by_udi, serviceImpl.get_beacon_by_udi)
          .AddMethod(__Method_calculate_position, serviceImpl.calculate_position).Build();
    }

  }
}
#endregion
