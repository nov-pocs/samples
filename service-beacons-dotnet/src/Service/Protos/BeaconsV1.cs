// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: beacons_v1.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace BeaconsV1 {

  /// <summary>Holder for reflection information generated from beacons_v1.proto</summary>
  public static partial class BeaconsV1Reflection {

    #region Descriptor
    /// <summary>File descriptor for beacons_v1.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BeaconsV1Reflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBiZWFjb25zX3YxLnByb3RvEgpiZWFjb25zX3YxIokCChBFcnJvckRlc2Ny",
            "aXB0aW9uEgwKBHR5cGUYASABKAkSEAoIY2F0ZWdvcnkYAiABKAkSDAoEY29k",
            "ZRgDIAEoCRIWCg5jb3JyZWxhdGlvbl9pZBgEIAEoCRIOCgZzdGF0dXMYBSAB",
            "KAkSDwoHbWVzc2FnZRgGIAEoCRINCgVjYXVzZRgHIAEoCRITCgtzdGFja190",
            "cmFjZRgIIAEoCRI6CgdkZXRhaWxzGAkgAygLMikuYmVhY29uc192MS5FcnJv",
            "ckRlc2NyaXB0aW9uLkRldGFpbHNFbnRyeRouCgxEZXRhaWxzRW50cnkSCwoD",
            "a2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ASI5CgxQYWdpbmdQYXJhbXMS",
            "DAoEc2tpcBgBIAEoAxIMCgR0YWtlGAIgASgFEg0KBXRvdGFsGAMgASgIIicK",
            "DUludGVybmFsQXJyYXkSFgoOaW50ZXJuYWxfYXJyYXkYASADKAIiSgoKR2Vv",
            "UG9pbnRWMRIMCgR0eXBlGAEgASgJEi4KC2Nvb3JkaW5hdGVzGAIgAygLMhku",
            "YmVhY29uc192MS5JbnRlcm5hbEFycmF5IokBCghCZWFjb25WMRIKCgJpZBgB",
            "IAEoCRIPCgdzaXRlX2lkGAIgASgJEgwKBHR5cGUYAyABKAkSCwoDdWRpGAQg",
            "ASgJEg0KBWxhYmVsGAUgASgJEiYKBmNlbnRlchgGIAEoCzIWLmJlYWNvbnNf",
            "djEuR2VvUG9pbnRWMRIOCgZyYWRpdXMYCCABKAIiQQoMQmVhY29uVjFQYWdl",
            "Eg0KBXRvdGFsGAEgASgDEiIKBGRhdGEYAiADKAsyFC5iZWFjb25zX3YxLkJl",
            "YWNvblYxIsMBChNCZWFjb25WMVBhZ2VSZXF1ZXN0EhYKDmNvcnJlbGF0aW9u",
            "X2lkGAEgASgJEjsKBmZpbHRlchgCIAMoCzIrLmJlYWNvbnNfdjEuQmVhY29u",
            "VjFQYWdlUmVxdWVzdC5GaWx0ZXJFbnRyeRIoCgZwYWdpbmcYAyABKAsyGC5i",
            "ZWFjb25zX3YxLlBhZ2luZ1BhcmFtcxotCgtGaWx0ZXJFbnRyeRILCgNrZXkY",
            "ASABKAkSDQoFdmFsdWUYAiABKAk6AjgBImgKEUJlYWNvblYxUGFnZVJlcGx5",
            "EisKBWVycm9yGAEgASgLMhwuYmVhY29uc192MS5FcnJvckRlc2NyaXB0aW9u",
            "EiYKBHBhZ2UYAiABKAsyGC5iZWFjb25zX3YxLkJlYWNvblYxUGFnZSI+ChFC",
            "ZWFjb25WMUlkUmVxdWVzdBIWCg5jb3JyZWxhdGlvbl9pZBgBIAEoCRIRCgli",
            "ZWFjb25faWQYAiABKAkiQAoSQmVhY29uVjFVZGlSZXF1ZXN0EhYKDmNvcnJl",
            "bGF0aW9uX2lkGAEgASgJEhIKCmJlYWNvbl91ZGkYAiABKAkiUAoXQmVhY29u",
            "VjFQb3NpdGlvblJlcXVlc3QSFgoOY29ycmVsYXRpb25faWQYASABKAkSDAoE",
            "dWRpcxgCIAMoCRIPCgdzaXRlX2lkGAMgASgJIlUKFUJlYWNvblYxT2JqZWN0",
            "UmVxdWVzdBIWCg5jb3JyZWxhdGlvbl9pZBgBIAEoCRIkCgZiZWFjb24YAiAB",
            "KAsyFC5iZWFjb25zX3YxLkJlYWNvblYxImgKE0JlYWNvblYxT2JqZWN0UmVw",
            "bHkSKwoFZXJyb3IYASABKAsyHC5iZWFjb25zX3YxLkVycm9yRGVzY3JpcHRp",
            "b24SJAoGYmVhY29uGAIgASgLMhQuYmVhY29uc192MS5CZWFjb25WMSJrChVC",
            "ZWFjb25WMVBvc2l0aW9uUmVwbHkSKwoFZXJyb3IYASABKAsyHC5iZWFjb25z",
            "X3YxLkVycm9yRGVzY3JpcHRpb24SJQoFcG9pbnQYAiABKAsyFi5iZWFjb25z",
            "X3YxLkdlb1BvaW50VjEy8QQKCUJlYWNvbnNWMRJPCgtnZXRfYmVhY29ucxIf",
            "LmJlYWNvbnNfdjEuQmVhY29uVjFQYWdlUmVxdWVzdBodLmJlYWNvbnNfdjEu",
            "QmVhY29uVjFQYWdlUmVwbHkiABJUChBnZXRfYmVhY29uX2J5X2lkEh0uYmVh",
            "Y29uc192MS5CZWFjb25WMUlkUmVxdWVzdBofLmJlYWNvbnNfdjEuQmVhY29u",
            "VjFPYmplY3RSZXBseSIAElUKDWNyZWF0ZV9iZWFjb24SIS5iZWFjb25zX3Yx",
            "LkJlYWNvblYxT2JqZWN0UmVxdWVzdBofLmJlYWNvbnNfdjEuQmVhY29uVjFP",
            "YmplY3RSZXBseSIAElUKDXVwZGF0ZV9iZWFjb24SIS5iZWFjb25zX3YxLkJl",
            "YWNvblYxT2JqZWN0UmVxdWVzdBofLmJlYWNvbnNfdjEuQmVhY29uVjFPYmpl",
            "Y3RSZXBseSIAElcKE2RlbGV0ZV9iZWFjb25fYnlfaWQSHS5iZWFjb25zX3Yx",
            "LkJlYWNvblYxSWRSZXF1ZXN0Gh8uYmVhY29uc192MS5CZWFjb25WMU9iamVj",
            "dFJlcGx5IgASVgoRZ2V0X2JlYWNvbl9ieV91ZGkSHi5iZWFjb25zX3YxLkJl",
            "YWNvblYxVWRpUmVxdWVzdBofLmJlYWNvbnNfdjEuQmVhY29uVjFPYmplY3RS",
            "ZXBseSIAEl4KEmNhbGN1bGF0ZV9wb3NpdGlvbhIjLmJlYWNvbnNfdjEuQmVh",
            "Y29uVjFQb3NpdGlvblJlcXVlc3QaIS5iZWFjb25zX3YxLkJlYWNvblYxUG9z",
            "aXRpb25SZXBseSIAQkIKHXBpcC1zZXJ2aWNlcy5iZWFjb25zLnZlcnNpb24x",
            "Qg5CZWFjb25zUHJvdG9WMVABogIOQkVBQ09OU19DTURfVjFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::BeaconsV1.ErrorDescription), global::BeaconsV1.ErrorDescription.Parser, new[]{ "Type", "Category", "Code", "CorrelationId", "Status", "Message", "Cause", "StackTrace", "Details" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::BeaconsV1.PagingParams), global::BeaconsV1.PagingParams.Parser, new[]{ "Skip", "Take", "Total" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::BeaconsV1.InternalArray), global::BeaconsV1.InternalArray.Parser, new[]{ "InternalArray_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::BeaconsV1.GeoPointV1), global::BeaconsV1.GeoPointV1.Parser, new[]{ "Type", "Coordinates" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::BeaconsV1.BeaconV1), global::BeaconsV1.BeaconV1.Parser, new[]{ "Id", "SiteId", "Type", "Udi", "Label", "Center", "Radius" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::BeaconsV1.BeaconV1Page), global::BeaconsV1.BeaconV1Page.Parser, new[]{ "Total", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::BeaconsV1.BeaconV1PageRequest), global::BeaconsV1.BeaconV1PageRequest.Parser, new[]{ "CorrelationId", "Filter", "Paging" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::BeaconsV1.BeaconV1PageReply), global::BeaconsV1.BeaconV1PageReply.Parser, new[]{ "Error", "Page" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::BeaconsV1.BeaconV1IdRequest), global::BeaconsV1.BeaconV1IdRequest.Parser, new[]{ "CorrelationId", "BeaconId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::BeaconsV1.BeaconV1UdiRequest), global::BeaconsV1.BeaconV1UdiRequest.Parser, new[]{ "CorrelationId", "BeaconUdi" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::BeaconsV1.BeaconV1PositionRequest), global::BeaconsV1.BeaconV1PositionRequest.Parser, new[]{ "CorrelationId", "Udis", "SiteId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::BeaconsV1.BeaconV1ObjectRequest), global::BeaconsV1.BeaconV1ObjectRequest.Parser, new[]{ "CorrelationId", "Beacon" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::BeaconsV1.BeaconV1ObjectReply), global::BeaconsV1.BeaconV1ObjectReply.Parser, new[]{ "Error", "Beacon" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::BeaconsV1.BeaconV1PositionReply), global::BeaconsV1.BeaconV1PositionReply.Parser, new[]{ "Error", "Point" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ErrorDescription : pb::IMessage<ErrorDescription> {
    private static readonly pb::MessageParser<ErrorDescription> _parser = new pb::MessageParser<ErrorDescription>(() => new ErrorDescription());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ErrorDescription> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BeaconsV1.BeaconsV1Reflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ErrorDescription() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ErrorDescription(ErrorDescription other) : this() {
      type_ = other.type_;
      category_ = other.category_;
      code_ = other.code_;
      correlationId_ = other.correlationId_;
      status_ = other.status_;
      message_ = other.message_;
      cause_ = other.cause_;
      stackTrace_ = other.stackTrace_;
      details_ = other.details_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ErrorDescription Clone() {
      return new ErrorDescription(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "category" field.</summary>
    public const int CategoryFieldNumber = 2;
    private string category_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Category {
      get { return category_; }
      set {
        category_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 3;
    private string code_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Code {
      get { return code_; }
      set {
        code_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "correlation_id" field.</summary>
    public const int CorrelationIdFieldNumber = 4;
    private string correlationId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CorrelationId {
      get { return correlationId_; }
      set {
        correlationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 5;
    private string status_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Status {
      get { return status_; }
      set {
        status_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 6;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cause" field.</summary>
    public const int CauseFieldNumber = 7;
    private string cause_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cause {
      get { return cause_; }
      set {
        cause_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "stack_trace" field.</summary>
    public const int StackTraceFieldNumber = 8;
    private string stackTrace_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StackTrace {
      get { return stackTrace_; }
      set {
        stackTrace_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "details" field.</summary>
    public const int DetailsFieldNumber = 9;
    private static readonly pbc::MapField<string, string>.Codec _map_details_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 74);
    private readonly pbc::MapField<string, string> details_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Details {
      get { return details_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ErrorDescription);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ErrorDescription other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Category != other.Category) return false;
      if (Code != other.Code) return false;
      if (CorrelationId != other.CorrelationId) return false;
      if (Status != other.Status) return false;
      if (Message != other.Message) return false;
      if (Cause != other.Cause) return false;
      if (StackTrace != other.StackTrace) return false;
      if (!Details.Equals(other.Details)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Category.Length != 0) hash ^= Category.GetHashCode();
      if (Code.Length != 0) hash ^= Code.GetHashCode();
      if (CorrelationId.Length != 0) hash ^= CorrelationId.GetHashCode();
      if (Status.Length != 0) hash ^= Status.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (Cause.Length != 0) hash ^= Cause.GetHashCode();
      if (StackTrace.Length != 0) hash ^= StackTrace.GetHashCode();
      hash ^= Details.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (Category.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Category);
      }
      if (Code.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Code);
      }
      if (CorrelationId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(CorrelationId);
      }
      if (Status.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Status);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Message);
      }
      if (Cause.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Cause);
      }
      if (StackTrace.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(StackTrace);
      }
      details_.WriteTo(output, _map_details_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Category.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Category);
      }
      if (Code.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Code);
      }
      if (CorrelationId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CorrelationId);
      }
      if (Status.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Status);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Cause.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cause);
      }
      if (StackTrace.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StackTrace);
      }
      size += details_.CalculateSize(_map_details_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ErrorDescription other) {
      if (other == null) {
        return;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Category.Length != 0) {
        Category = other.Category;
      }
      if (other.Code.Length != 0) {
        Code = other.Code;
      }
      if (other.CorrelationId.Length != 0) {
        CorrelationId = other.CorrelationId;
      }
      if (other.Status.Length != 0) {
        Status = other.Status;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.Cause.Length != 0) {
        Cause = other.Cause;
      }
      if (other.StackTrace.Length != 0) {
        StackTrace = other.StackTrace;
      }
      details_.Add(other.details_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 18: {
            Category = input.ReadString();
            break;
          }
          case 26: {
            Code = input.ReadString();
            break;
          }
          case 34: {
            CorrelationId = input.ReadString();
            break;
          }
          case 42: {
            Status = input.ReadString();
            break;
          }
          case 50: {
            Message = input.ReadString();
            break;
          }
          case 58: {
            Cause = input.ReadString();
            break;
          }
          case 66: {
            StackTrace = input.ReadString();
            break;
          }
          case 74: {
            details_.AddEntriesFrom(input, _map_details_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PagingParams : pb::IMessage<PagingParams> {
    private static readonly pb::MessageParser<PagingParams> _parser = new pb::MessageParser<PagingParams>(() => new PagingParams());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PagingParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BeaconsV1.BeaconsV1Reflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PagingParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PagingParams(PagingParams other) : this() {
      skip_ = other.skip_;
      take_ = other.take_;
      total_ = other.total_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PagingParams Clone() {
      return new PagingParams(this);
    }

    /// <summary>Field number for the "skip" field.</summary>
    public const int SkipFieldNumber = 1;
    private long skip_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Skip {
      get { return skip_; }
      set {
        skip_ = value;
      }
    }

    /// <summary>Field number for the "take" field.</summary>
    public const int TakeFieldNumber = 2;
    private int take_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Take {
      get { return take_; }
      set {
        take_ = value;
      }
    }

    /// <summary>Field number for the "total" field.</summary>
    public const int TotalFieldNumber = 3;
    private bool total_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Total {
      get { return total_; }
      set {
        total_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PagingParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PagingParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Skip != other.Skip) return false;
      if (Take != other.Take) return false;
      if (Total != other.Total) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Skip != 0L) hash ^= Skip.GetHashCode();
      if (Take != 0) hash ^= Take.GetHashCode();
      if (Total != false) hash ^= Total.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Skip != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Skip);
      }
      if (Take != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Take);
      }
      if (Total != false) {
        output.WriteRawTag(24);
        output.WriteBool(Total);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Skip != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Skip);
      }
      if (Take != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Take);
      }
      if (Total != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PagingParams other) {
      if (other == null) {
        return;
      }
      if (other.Skip != 0L) {
        Skip = other.Skip;
      }
      if (other.Take != 0) {
        Take = other.Take;
      }
      if (other.Total != false) {
        Total = other.Total;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Skip = input.ReadInt64();
            break;
          }
          case 16: {
            Take = input.ReadInt32();
            break;
          }
          case 24: {
            Total = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InternalArray : pb::IMessage<InternalArray> {
    private static readonly pb::MessageParser<InternalArray> _parser = new pb::MessageParser<InternalArray>(() => new InternalArray());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InternalArray> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BeaconsV1.BeaconsV1Reflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternalArray() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternalArray(InternalArray other) : this() {
      internalArray_ = other.internalArray_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternalArray Clone() {
      return new InternalArray(this);
    }

    /// <summary>Field number for the "internal_array" field.</summary>
    public const int InternalArray_FieldNumber = 1;
    private static readonly pb::FieldCodec<float> _repeated_internalArray_codec
        = pb::FieldCodec.ForFloat(10);
    private readonly pbc::RepeatedField<float> internalArray_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> InternalArray_ {
      get { return internalArray_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InternalArray);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InternalArray other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!internalArray_.Equals(other.internalArray_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= internalArray_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      internalArray_.WriteTo(output, _repeated_internalArray_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += internalArray_.CalculateSize(_repeated_internalArray_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InternalArray other) {
      if (other == null) {
        return;
      }
      internalArray_.Add(other.internalArray_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 13: {
            internalArray_.AddEntriesFrom(input, _repeated_internalArray_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GeoPointV1 : pb::IMessage<GeoPointV1> {
    private static readonly pb::MessageParser<GeoPointV1> _parser = new pb::MessageParser<GeoPointV1>(() => new GeoPointV1());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GeoPointV1> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BeaconsV1.BeaconsV1Reflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeoPointV1() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeoPointV1(GeoPointV1 other) : this() {
      type_ = other.type_;
      coordinates_ = other.coordinates_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeoPointV1 Clone() {
      return new GeoPointV1(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "coordinates" field.</summary>
    public const int CoordinatesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::BeaconsV1.InternalArray> _repeated_coordinates_codec
        = pb::FieldCodec.ForMessage(18, global::BeaconsV1.InternalArray.Parser);
    private readonly pbc::RepeatedField<global::BeaconsV1.InternalArray> coordinates_ = new pbc::RepeatedField<global::BeaconsV1.InternalArray>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::BeaconsV1.InternalArray> Coordinates {
      get { return coordinates_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GeoPointV1);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GeoPointV1 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if(!coordinates_.Equals(other.coordinates_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      hash ^= coordinates_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      coordinates_.WriteTo(output, _repeated_coordinates_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      size += coordinates_.CalculateSize(_repeated_coordinates_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GeoPointV1 other) {
      if (other == null) {
        return;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      coordinates_.Add(other.coordinates_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 18: {
            coordinates_.AddEntriesFrom(input, _repeated_coordinates_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BeaconV1 : pb::IMessage<BeaconV1> {
    private static readonly pb::MessageParser<BeaconV1> _parser = new pb::MessageParser<BeaconV1>(() => new BeaconV1());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BeaconV1> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BeaconsV1.BeaconsV1Reflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BeaconV1() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BeaconV1(BeaconV1 other) : this() {
      id_ = other.id_;
      siteId_ = other.siteId_;
      type_ = other.type_;
      udi_ = other.udi_;
      label_ = other.label_;
      Center = other.center_ != null ? other.Center.Clone() : null;
      radius_ = other.radius_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BeaconV1 Clone() {
      return new BeaconV1(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "site_id" field.</summary>
    public const int SiteIdFieldNumber = 2;
    private string siteId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SiteId {
      get { return siteId_; }
      set {
        siteId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "udi" field.</summary>
    public const int UdiFieldNumber = 4;
    private string udi_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Udi {
      get { return udi_; }
      set {
        udi_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 5;
    private string label_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Label {
      get { return label_; }
      set {
        label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "center" field.</summary>
    public const int CenterFieldNumber = 6;
    private global::BeaconsV1.GeoPointV1 center_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::BeaconsV1.GeoPointV1 Center {
      get { return center_; }
      set {
        center_ = value;
      }
    }

    /// <summary>Field number for the "radius" field.</summary>
    public const int RadiusFieldNumber = 8;
    private float radius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Radius {
      get { return radius_; }
      set {
        radius_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BeaconV1);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BeaconV1 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (SiteId != other.SiteId) return false;
      if (Type != other.Type) return false;
      if (Udi != other.Udi) return false;
      if (Label != other.Label) return false;
      if (!object.Equals(Center, other.Center)) return false;
      if (Radius != other.Radius) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (SiteId.Length != 0) hash ^= SiteId.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Udi.Length != 0) hash ^= Udi.GetHashCode();
      if (Label.Length != 0) hash ^= Label.GetHashCode();
      if (center_ != null) hash ^= Center.GetHashCode();
      if (Radius != 0F) hash ^= Radius.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (SiteId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SiteId);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Type);
      }
      if (Udi.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Udi);
      }
      if (Label.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Label);
      }
      if (center_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Center);
      }
      if (Radius != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(Radius);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (SiteId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SiteId);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Udi.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Udi);
      }
      if (Label.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
      }
      if (center_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Center);
      }
      if (Radius != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BeaconV1 other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.SiteId.Length != 0) {
        SiteId = other.SiteId;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Udi.Length != 0) {
        Udi = other.Udi;
      }
      if (other.Label.Length != 0) {
        Label = other.Label;
      }
      if (other.center_ != null) {
        if (center_ == null) {
          center_ = new global::BeaconsV1.GeoPointV1();
        }
        Center.MergeFrom(other.Center);
      }
      if (other.Radius != 0F) {
        Radius = other.Radius;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            SiteId = input.ReadString();
            break;
          }
          case 26: {
            Type = input.ReadString();
            break;
          }
          case 34: {
            Udi = input.ReadString();
            break;
          }
          case 42: {
            Label = input.ReadString();
            break;
          }
          case 50: {
            if (center_ == null) {
              center_ = new global::BeaconsV1.GeoPointV1();
            }
            input.ReadMessage(center_);
            break;
          }
          case 69: {
            Radius = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BeaconV1Page : pb::IMessage<BeaconV1Page> {
    private static readonly pb::MessageParser<BeaconV1Page> _parser = new pb::MessageParser<BeaconV1Page>(() => new BeaconV1Page());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BeaconV1Page> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BeaconsV1.BeaconsV1Reflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BeaconV1Page() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BeaconV1Page(BeaconV1Page other) : this() {
      total_ = other.total_;
      data_ = other.data_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BeaconV1Page Clone() {
      return new BeaconV1Page(this);
    }

    /// <summary>Field number for the "total" field.</summary>
    public const int TotalFieldNumber = 1;
    private long total_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Total {
      get { return total_; }
      set {
        total_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private static readonly pb::FieldCodec<global::BeaconsV1.BeaconV1> _repeated_data_codec
        = pb::FieldCodec.ForMessage(18, global::BeaconsV1.BeaconV1.Parser);
    private readonly pbc::RepeatedField<global::BeaconsV1.BeaconV1> data_ = new pbc::RepeatedField<global::BeaconsV1.BeaconV1>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::BeaconsV1.BeaconV1> Data {
      get { return data_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BeaconV1Page);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BeaconV1Page other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Total != other.Total) return false;
      if(!data_.Equals(other.data_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Total != 0L) hash ^= Total.GetHashCode();
      hash ^= data_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Total != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Total);
      }
      data_.WriteTo(output, _repeated_data_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Total != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Total);
      }
      size += data_.CalculateSize(_repeated_data_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BeaconV1Page other) {
      if (other == null) {
        return;
      }
      if (other.Total != 0L) {
        Total = other.Total;
      }
      data_.Add(other.data_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Total = input.ReadInt64();
            break;
          }
          case 18: {
            data_.AddEntriesFrom(input, _repeated_data_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The request message containing the beacon page request.
  /// </summary>
  public sealed partial class BeaconV1PageRequest : pb::IMessage<BeaconV1PageRequest> {
    private static readonly pb::MessageParser<BeaconV1PageRequest> _parser = new pb::MessageParser<BeaconV1PageRequest>(() => new BeaconV1PageRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BeaconV1PageRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BeaconsV1.BeaconsV1Reflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BeaconV1PageRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BeaconV1PageRequest(BeaconV1PageRequest other) : this() {
      correlationId_ = other.correlationId_;
      filter_ = other.filter_.Clone();
      Paging = other.paging_ != null ? other.Paging.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BeaconV1PageRequest Clone() {
      return new BeaconV1PageRequest(this);
    }

    /// <summary>Field number for the "correlation_id" field.</summary>
    public const int CorrelationIdFieldNumber = 1;
    private string correlationId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CorrelationId {
      get { return correlationId_; }
      set {
        correlationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "filter" field.</summary>
    public const int FilterFieldNumber = 2;
    private static readonly pbc::MapField<string, string>.Codec _map_filter_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 18);
    private readonly pbc::MapField<string, string> filter_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Filter {
      get { return filter_; }
    }

    /// <summary>Field number for the "paging" field.</summary>
    public const int PagingFieldNumber = 3;
    private global::BeaconsV1.PagingParams paging_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::BeaconsV1.PagingParams Paging {
      get { return paging_; }
      set {
        paging_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BeaconV1PageRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BeaconV1PageRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CorrelationId != other.CorrelationId) return false;
      if (!Filter.Equals(other.Filter)) return false;
      if (!object.Equals(Paging, other.Paging)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CorrelationId.Length != 0) hash ^= CorrelationId.GetHashCode();
      hash ^= Filter.GetHashCode();
      if (paging_ != null) hash ^= Paging.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CorrelationId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CorrelationId);
      }
      filter_.WriteTo(output, _map_filter_codec);
      if (paging_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Paging);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CorrelationId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CorrelationId);
      }
      size += filter_.CalculateSize(_map_filter_codec);
      if (paging_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Paging);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BeaconV1PageRequest other) {
      if (other == null) {
        return;
      }
      if (other.CorrelationId.Length != 0) {
        CorrelationId = other.CorrelationId;
      }
      filter_.Add(other.filter_);
      if (other.paging_ != null) {
        if (paging_ == null) {
          paging_ = new global::BeaconsV1.PagingParams();
        }
        Paging.MergeFrom(other.Paging);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            CorrelationId = input.ReadString();
            break;
          }
          case 18: {
            filter_.AddEntriesFrom(input, _map_filter_codec);
            break;
          }
          case 26: {
            if (paging_ == null) {
              paging_ = new global::BeaconsV1.PagingParams();
            }
            input.ReadMessage(paging_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The response message containing the beacon page response
  /// </summary>
  public sealed partial class BeaconV1PageReply : pb::IMessage<BeaconV1PageReply> {
    private static readonly pb::MessageParser<BeaconV1PageReply> _parser = new pb::MessageParser<BeaconV1PageReply>(() => new BeaconV1PageReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BeaconV1PageReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BeaconsV1.BeaconsV1Reflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BeaconV1PageReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BeaconV1PageReply(BeaconV1PageReply other) : this() {
      Error = other.error_ != null ? other.Error.Clone() : null;
      Page = other.page_ != null ? other.Page.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BeaconV1PageReply Clone() {
      return new BeaconV1PageReply(this);
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 1;
    private global::BeaconsV1.ErrorDescription error_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::BeaconsV1.ErrorDescription Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    /// <summary>Field number for the "page" field.</summary>
    public const int PageFieldNumber = 2;
    private global::BeaconsV1.BeaconV1Page page_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::BeaconsV1.BeaconV1Page Page {
      get { return page_; }
      set {
        page_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BeaconV1PageReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BeaconV1PageReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Error, other.Error)) return false;
      if (!object.Equals(Page, other.Page)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (error_ != null) hash ^= Error.GetHashCode();
      if (page_ != null) hash ^= Page.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (error_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Error);
      }
      if (page_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Page);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (error_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      if (page_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Page);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BeaconV1PageReply other) {
      if (other == null) {
        return;
      }
      if (other.error_ != null) {
        if (error_ == null) {
          error_ = new global::BeaconsV1.ErrorDescription();
        }
        Error.MergeFrom(other.Error);
      }
      if (other.page_ != null) {
        if (page_ == null) {
          page_ = new global::BeaconsV1.BeaconV1Page();
        }
        Page.MergeFrom(other.Page);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (error_ == null) {
              error_ = new global::BeaconsV1.ErrorDescription();
            }
            input.ReadMessage(error_);
            break;
          }
          case 18: {
            if (page_ == null) {
              page_ = new global::BeaconsV1.BeaconV1Page();
            }
            input.ReadMessage(page_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The request message containing the beacon id request.
  /// </summary>
  public sealed partial class BeaconV1IdRequest : pb::IMessage<BeaconV1IdRequest> {
    private static readonly pb::MessageParser<BeaconV1IdRequest> _parser = new pb::MessageParser<BeaconV1IdRequest>(() => new BeaconV1IdRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BeaconV1IdRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BeaconsV1.BeaconsV1Reflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BeaconV1IdRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BeaconV1IdRequest(BeaconV1IdRequest other) : this() {
      correlationId_ = other.correlationId_;
      beaconId_ = other.beaconId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BeaconV1IdRequest Clone() {
      return new BeaconV1IdRequest(this);
    }

    /// <summary>Field number for the "correlation_id" field.</summary>
    public const int CorrelationIdFieldNumber = 1;
    private string correlationId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CorrelationId {
      get { return correlationId_; }
      set {
        correlationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "beacon_id" field.</summary>
    public const int BeaconIdFieldNumber = 2;
    private string beaconId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BeaconId {
      get { return beaconId_; }
      set {
        beaconId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BeaconV1IdRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BeaconV1IdRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CorrelationId != other.CorrelationId) return false;
      if (BeaconId != other.BeaconId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CorrelationId.Length != 0) hash ^= CorrelationId.GetHashCode();
      if (BeaconId.Length != 0) hash ^= BeaconId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CorrelationId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CorrelationId);
      }
      if (BeaconId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BeaconId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CorrelationId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CorrelationId);
      }
      if (BeaconId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BeaconId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BeaconV1IdRequest other) {
      if (other == null) {
        return;
      }
      if (other.CorrelationId.Length != 0) {
        CorrelationId = other.CorrelationId;
      }
      if (other.BeaconId.Length != 0) {
        BeaconId = other.BeaconId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            CorrelationId = input.ReadString();
            break;
          }
          case 18: {
            BeaconId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The request message containing the beacon udi request.
  /// </summary>
  public sealed partial class BeaconV1UdiRequest : pb::IMessage<BeaconV1UdiRequest> {
    private static readonly pb::MessageParser<BeaconV1UdiRequest> _parser = new pb::MessageParser<BeaconV1UdiRequest>(() => new BeaconV1UdiRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BeaconV1UdiRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BeaconsV1.BeaconsV1Reflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BeaconV1UdiRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BeaconV1UdiRequest(BeaconV1UdiRequest other) : this() {
      correlationId_ = other.correlationId_;
      beaconUdi_ = other.beaconUdi_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BeaconV1UdiRequest Clone() {
      return new BeaconV1UdiRequest(this);
    }

    /// <summary>Field number for the "correlation_id" field.</summary>
    public const int CorrelationIdFieldNumber = 1;
    private string correlationId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CorrelationId {
      get { return correlationId_; }
      set {
        correlationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "beacon_udi" field.</summary>
    public const int BeaconUdiFieldNumber = 2;
    private string beaconUdi_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BeaconUdi {
      get { return beaconUdi_; }
      set {
        beaconUdi_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BeaconV1UdiRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BeaconV1UdiRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CorrelationId != other.CorrelationId) return false;
      if (BeaconUdi != other.BeaconUdi) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CorrelationId.Length != 0) hash ^= CorrelationId.GetHashCode();
      if (BeaconUdi.Length != 0) hash ^= BeaconUdi.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CorrelationId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CorrelationId);
      }
      if (BeaconUdi.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BeaconUdi);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CorrelationId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CorrelationId);
      }
      if (BeaconUdi.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BeaconUdi);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BeaconV1UdiRequest other) {
      if (other == null) {
        return;
      }
      if (other.CorrelationId.Length != 0) {
        CorrelationId = other.CorrelationId;
      }
      if (other.BeaconUdi.Length != 0) {
        BeaconUdi = other.BeaconUdi;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            CorrelationId = input.ReadString();
            break;
          }
          case 18: {
            BeaconUdi = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The request message containing the beacon position request.
  /// </summary>
  public sealed partial class BeaconV1PositionRequest : pb::IMessage<BeaconV1PositionRequest> {
    private static readonly pb::MessageParser<BeaconV1PositionRequest> _parser = new pb::MessageParser<BeaconV1PositionRequest>(() => new BeaconV1PositionRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BeaconV1PositionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BeaconsV1.BeaconsV1Reflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BeaconV1PositionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BeaconV1PositionRequest(BeaconV1PositionRequest other) : this() {
      correlationId_ = other.correlationId_;
      udis_ = other.udis_.Clone();
      siteId_ = other.siteId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BeaconV1PositionRequest Clone() {
      return new BeaconV1PositionRequest(this);
    }

    /// <summary>Field number for the "correlation_id" field.</summary>
    public const int CorrelationIdFieldNumber = 1;
    private string correlationId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CorrelationId {
      get { return correlationId_; }
      set {
        correlationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "udis" field.</summary>
    public const int UdisFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_udis_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> udis_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Udis {
      get { return udis_; }
    }

    /// <summary>Field number for the "site_id" field.</summary>
    public const int SiteIdFieldNumber = 3;
    private string siteId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SiteId {
      get { return siteId_; }
      set {
        siteId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BeaconV1PositionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BeaconV1PositionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CorrelationId != other.CorrelationId) return false;
      if(!udis_.Equals(other.udis_)) return false;
      if (SiteId != other.SiteId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CorrelationId.Length != 0) hash ^= CorrelationId.GetHashCode();
      hash ^= udis_.GetHashCode();
      if (SiteId.Length != 0) hash ^= SiteId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CorrelationId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CorrelationId);
      }
      udis_.WriteTo(output, _repeated_udis_codec);
      if (SiteId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SiteId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CorrelationId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CorrelationId);
      }
      size += udis_.CalculateSize(_repeated_udis_codec);
      if (SiteId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SiteId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BeaconV1PositionRequest other) {
      if (other == null) {
        return;
      }
      if (other.CorrelationId.Length != 0) {
        CorrelationId = other.CorrelationId;
      }
      udis_.Add(other.udis_);
      if (other.SiteId.Length != 0) {
        SiteId = other.SiteId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            CorrelationId = input.ReadString();
            break;
          }
          case 18: {
            udis_.AddEntriesFrom(input, _repeated_udis_codec);
            break;
          }
          case 26: {
            SiteId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The request message containing the beacon object request.
  /// </summary>
  public sealed partial class BeaconV1ObjectRequest : pb::IMessage<BeaconV1ObjectRequest> {
    private static readonly pb::MessageParser<BeaconV1ObjectRequest> _parser = new pb::MessageParser<BeaconV1ObjectRequest>(() => new BeaconV1ObjectRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BeaconV1ObjectRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BeaconsV1.BeaconsV1Reflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BeaconV1ObjectRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BeaconV1ObjectRequest(BeaconV1ObjectRequest other) : this() {
      correlationId_ = other.correlationId_;
      Beacon = other.beacon_ != null ? other.Beacon.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BeaconV1ObjectRequest Clone() {
      return new BeaconV1ObjectRequest(this);
    }

    /// <summary>Field number for the "correlation_id" field.</summary>
    public const int CorrelationIdFieldNumber = 1;
    private string correlationId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CorrelationId {
      get { return correlationId_; }
      set {
        correlationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "beacon" field.</summary>
    public const int BeaconFieldNumber = 2;
    private global::BeaconsV1.BeaconV1 beacon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::BeaconsV1.BeaconV1 Beacon {
      get { return beacon_; }
      set {
        beacon_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BeaconV1ObjectRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BeaconV1ObjectRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CorrelationId != other.CorrelationId) return false;
      if (!object.Equals(Beacon, other.Beacon)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CorrelationId.Length != 0) hash ^= CorrelationId.GetHashCode();
      if (beacon_ != null) hash ^= Beacon.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CorrelationId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CorrelationId);
      }
      if (beacon_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Beacon);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CorrelationId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CorrelationId);
      }
      if (beacon_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Beacon);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BeaconV1ObjectRequest other) {
      if (other == null) {
        return;
      }
      if (other.CorrelationId.Length != 0) {
        CorrelationId = other.CorrelationId;
      }
      if (other.beacon_ != null) {
        if (beacon_ == null) {
          beacon_ = new global::BeaconsV1.BeaconV1();
        }
        Beacon.MergeFrom(other.Beacon);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            CorrelationId = input.ReadString();
            break;
          }
          case 18: {
            if (beacon_ == null) {
              beacon_ = new global::BeaconsV1.BeaconV1();
            }
            input.ReadMessage(beacon_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The response message containing the beacon object response
  /// </summary>
  public sealed partial class BeaconV1ObjectReply : pb::IMessage<BeaconV1ObjectReply> {
    private static readonly pb::MessageParser<BeaconV1ObjectReply> _parser = new pb::MessageParser<BeaconV1ObjectReply>(() => new BeaconV1ObjectReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BeaconV1ObjectReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BeaconsV1.BeaconsV1Reflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BeaconV1ObjectReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BeaconV1ObjectReply(BeaconV1ObjectReply other) : this() {
      Error = other.error_ != null ? other.Error.Clone() : null;
      Beacon = other.beacon_ != null ? other.Beacon.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BeaconV1ObjectReply Clone() {
      return new BeaconV1ObjectReply(this);
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 1;
    private global::BeaconsV1.ErrorDescription error_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::BeaconsV1.ErrorDescription Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    /// <summary>Field number for the "beacon" field.</summary>
    public const int BeaconFieldNumber = 2;
    private global::BeaconsV1.BeaconV1 beacon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::BeaconsV1.BeaconV1 Beacon {
      get { return beacon_; }
      set {
        beacon_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BeaconV1ObjectReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BeaconV1ObjectReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Error, other.Error)) return false;
      if (!object.Equals(Beacon, other.Beacon)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (error_ != null) hash ^= Error.GetHashCode();
      if (beacon_ != null) hash ^= Beacon.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (error_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Error);
      }
      if (beacon_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Beacon);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (error_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      if (beacon_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Beacon);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BeaconV1ObjectReply other) {
      if (other == null) {
        return;
      }
      if (other.error_ != null) {
        if (error_ == null) {
          error_ = new global::BeaconsV1.ErrorDescription();
        }
        Error.MergeFrom(other.Error);
      }
      if (other.beacon_ != null) {
        if (beacon_ == null) {
          beacon_ = new global::BeaconsV1.BeaconV1();
        }
        Beacon.MergeFrom(other.Beacon);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (error_ == null) {
              error_ = new global::BeaconsV1.ErrorDescription();
            }
            input.ReadMessage(error_);
            break;
          }
          case 18: {
            if (beacon_ == null) {
              beacon_ = new global::BeaconsV1.BeaconV1();
            }
            input.ReadMessage(beacon_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  The response message containing the geo point object response
  /// </summary>
  public sealed partial class BeaconV1PositionReply : pb::IMessage<BeaconV1PositionReply> {
    private static readonly pb::MessageParser<BeaconV1PositionReply> _parser = new pb::MessageParser<BeaconV1PositionReply>(() => new BeaconV1PositionReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BeaconV1PositionReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BeaconsV1.BeaconsV1Reflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BeaconV1PositionReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BeaconV1PositionReply(BeaconV1PositionReply other) : this() {
      Error = other.error_ != null ? other.Error.Clone() : null;
      Point = other.point_ != null ? other.Point.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BeaconV1PositionReply Clone() {
      return new BeaconV1PositionReply(this);
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 1;
    private global::BeaconsV1.ErrorDescription error_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::BeaconsV1.ErrorDescription Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    /// <summary>Field number for the "point" field.</summary>
    public const int PointFieldNumber = 2;
    private global::BeaconsV1.GeoPointV1 point_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::BeaconsV1.GeoPointV1 Point {
      get { return point_; }
      set {
        point_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BeaconV1PositionReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BeaconV1PositionReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Error, other.Error)) return false;
      if (!object.Equals(Point, other.Point)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (error_ != null) hash ^= Error.GetHashCode();
      if (point_ != null) hash ^= Point.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (error_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Error);
      }
      if (point_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Point);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (error_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      if (point_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Point);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BeaconV1PositionReply other) {
      if (other == null) {
        return;
      }
      if (other.error_ != null) {
        if (error_ == null) {
          error_ = new global::BeaconsV1.ErrorDescription();
        }
        Error.MergeFrom(other.Error);
      }
      if (other.point_ != null) {
        if (point_ == null) {
          point_ = new global::BeaconsV1.GeoPointV1();
        }
        Point.MergeFrom(other.Point);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (error_ == null) {
              error_ = new global::BeaconsV1.ErrorDescription();
            }
            input.ReadMessage(error_);
            break;
          }
          case 18: {
            if (point_ == null) {
              point_ = new global::BeaconsV1.GeoPointV1();
            }
            input.ReadMessage(point_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
